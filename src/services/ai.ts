import OpenAI from 'openai';
import { GenerateReelRequest } from '@/types';
import { uploadVideo, getSignedVideoUrl } from './s3';

// Check for required environment variables
const requiredEnvVars = {
  OPENAI_API_KEY: process.env.OPENAI_API_KEY,
  AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
  AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
  AWS_REGION: process.env.AWS_REGION,
  AWS_S3_BUCKET: process.env.AWS_S3_BUCKET,
};

// Validate environment variables
const missingEnvVars = Object.entries(requiredEnvVars)
  .filter(([_, value]) => !value)
  .map(([key]) => key);

if (missingEnvVars.length > 0) {
  console.warn(`Missing environment variables: ${missingEnvVars.join(', ')}`);
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || 'dummy-key-for-build',
});

export async function generateScript(request: GenerateReelRequest): Promise<string> {
  try {
    if (!process.env.OPENAI_API_KEY) {
      console.warn('OPENAI_API_KEY not found, using mock script');
      // Return a mock script for development/build
      return `This is a mock script about ${request.celebrityName}'s sports career. In production, this would be generated by OpenAI.`;
    }

    const prompt = `Write a short, engaging 30-second script about ${request.celebrityName}'s sports career and achievements. Focus on the most interesting and impactful moments. Keep it concise and exciting.`;

    console.log('Generating script for:', request.celebrityName);
    
    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: prompt }],
      model: "gpt-4-turbo-preview",
      max_tokens: 150,
    });

    const script = completion.choices[0].message.content || '';
    console.log('Generated script:', script);
    
    return script;
  } catch (error) {
    console.error('Error generating script:', error);
    if (error instanceof Error) {
      // Check for specific OpenAI errors
      if (error.message.includes('401') || error.message.includes('unauthorized')) {
        throw new Error('OpenAI API key is invalid or expired');
      }
      if (error.message.includes('429') || error.message.includes('rate limit')) {
        throw new Error('OpenAI rate limit exceeded');
      }
      if (error.message.includes('500') || error.message.includes('server error')) {
        throw new Error('OpenAI service temporarily unavailable');
      }
      throw new Error(`Failed to generate script: ${error.message}`);
    }
    throw new Error('Failed to generate script');
  }
}

export async function generateVideo(script: string, celebrityName: string): Promise<{ videoUrl: string; thumbnailUrl: string }> {
  try {
    if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {
      console.warn('AWS credentials not found, using mock URLs');
      // Return mock URLs for development/build
      return {
        videoUrl: 'https://example.com/mock-video.mp4',
        thumbnailUrl: 'https://example.com/mock-thumbnail.jpg'
      };
    }

    // Upload a placeholder video
    const videoKey = `videos/${celebrityName.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}.mp4`;
    await uploadVideo(videoKey, 'mock-video-content');

    // Get signed URL for the video
    const videoUrl = await getSignedVideoUrl(videoKey);

    return {
      videoUrl,
      thumbnailUrl: 'https://example.com/placeholder-thumbnail.jpg'
    };
  } catch (error) {
    console.error('Error generating video:', error);
    if (error instanceof Error) {
      // Check for specific AWS errors
      if (error.message.includes('AccessDenied') || error.message.includes('403')) {
        throw new Error('AWS S3 access denied - check credentials and permissions');
      }
      if (error.message.includes('NoSuchBucket') || error.message.includes('404')) {
        throw new Error('AWS S3 bucket not found - check bucket name and region');
      }
      if (error.message.includes('InvalidAccessKeyId') || error.message.includes('401')) {
        throw new Error('AWS access key is invalid');
      }
      throw new Error(`Failed to generate video: ${error.message}`);
    }
    throw new Error('Failed to generate video');
  }
} 